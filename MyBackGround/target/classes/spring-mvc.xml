<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
                        http://www.springframework.org/schema/beans/spring-beans-4.0.xsd 
                        http://www.springframework.org/schema/context 
                        http://www.springframework.org/schema/context/spring-context-4.0.xsd 
                        http://www.springframework.org/schema/mvc 
                        http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd 
                        http://www.springframework.org/schema/tx 
                        http://www.springframework.org/schema/tx/spring-tx-4.0.xsd 
            			http://www.springframework.org/schema/aop 
            			http://www.springframework.org/schema/aop/spring-aop-4.0.xsd">
            			
     <!-- Spring为我们提供了一种极为方便注册这些BeanPostProcessor的方式，  
           即使用<context:annotation- config/>隐式地向 Spring容器注册  
    AutowiredAnnotationBeanPostProcessor、  
    RequiredAnnotationBeanPostProcessor、  
    CommonAnnotationBeanPostProcessor以及  
    PersistenceAnnotationBeanPostProcessor这4个BeanPostProcessor -->  
    <!--<context:annotation-config />-->
    
   	
    <!-- 启动 @AspectJ 支持 -->
 
    <aop:aspectj-autoproxy  proxy-target-class="true"></aop:aspectj-autoproxy>
    
 	<!-- <mvc:annotation-driven /> 是一种简写形式,  
        会自动注册DefaultAnnotationHandlerMapping与  
        AnnotationMethodHandlerAdapter 两个bean,  
        是spring MVC为@Controllers分发请求所必须的 -->  
    <mvc:annotation-driven />
    
    <!-- 自动扫描该包，使SpringMVC认为包下用了@controller注解的类是控制器 -->
	<context:component-scan base-package="com" use-default-filters="false">
	   <context:include-filter type="regex" expression=".*.*.controller.*"/>
    </context:component-scan>
    
   	<!-- 拦截器设置 -->
    <mvc:interceptors>
    
      <!-- 注入请求参数BEAN及门面业务处理的拦截器 -->
	  <mvc:interceptor>
	   <!-- 需拦截的地址 --> 
	   <mvc:mapping path="/mobile/**" />
	   <bean class="com.youxianji.web.interceptor.BeanFacadeFactroyInterceptor"/>
	  </mvc:interceptor>
	  
	 
	  <!-- 验证接口校验码的拦截器 -->
	  <mvc:interceptor>
	  	<mvc:mapping path="/mobile/**" />
	  	<bean class="com.youxianji.web.interceptor.CheckSignInterceptor">
	  		<property name="ignoreCommands">
	  			<value></value>
	  		</property>
	  	</bean>
	  </mvc:interceptor>
	  
	   <!-- 验证接口登录信息的拦截器 -->
	  <mvc:interceptor>
	  	<mvc:mapping path="/mobile/**" />
	  	<bean class="com.youxianji.web.interceptor.LoginInterceptor">
	  		<property name="ignoreCommands">
	  			<value>1001,1002,1003,3001,3002,3003,3004,3005,3006,3007,3008,3009,3010,1015,3011,3013,3014,3015,5002,7001,5001,k001,k002,k003,k007</value>
	  		</property>
	  	</bean>
	  </mvc:interceptor> 
	  
	  
	</mvc:interceptors>	 
	 
	<!--避免IE执行AJAX时，返回JSON出现下载文件-->
	<bean id="mappingJackson2HttpMessageConverter"
		class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
		<property name="supportedMediaTypes">
			<list>
				<value>text/html;charset=UTF-8</value>
			</list>
		</property>
	</bean> 
	<!-- 启动SpringMVC的注解功能，完成请求和注解POJO的映射 -->
	<bean
		class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
		<property name="messageConverters">
			<list>
				<!-- JSON转换器 -->
				<ref bean="mappingJackson2HttpMessageConverter" />	
			</list>
		</property>
	</bean>
	<!-- 不过滤静态资源-->
	<mvc:resources mapping="/resource/**" location="/resource/" />
    
    
	<!-- 定义跳转的文件的前后缀 ，视图模式配置-->
	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<!-- 这里的配置我的理解是自动给后面action的方法return的字符串加上前缀和后缀，变成一个 可用的url地址 -->
		<property name="prefix" value="/WEB-INF/jsp/" />
		<property name="suffix" value=".jsp" />
	</bean>
	
	<!-- 配置文件上传，如果没有使用文件上传可以不用配置，当然如果不配，那么配置文件中也不必引入上传组件包 -->
	<bean id="multipartResolver"  
        class="org.springframework.web.multipart.commons.CommonsMultipartResolver">  
        <!-- 默认编码 -->
        <property name="defaultEncoding" value="utf-8" />  
        <!-- 文件大小最大值 -->
        <property name="maxUploadSize" value="10485760000" />  
        <!-- 内存中的最大值 -->
        <property name="maxInMemorySize" value="40960" />  
    </bean> 
   
</beans>